-- WaterDistributionSystem class
class WaterDistributionSystem
types
    public WaterQuality = <Clean> | <Contaminated>

instance variables
    private represas : seq of Represa := [];
    private comunidades : seq of Comunidad := [];
 
operations
    -- Agregar una nueva represa al sistema
	public AddRepresa: Represa ==> bool
	AddRepresa(r) ==
	  (
		if r.GetWaterLevel() > r.GetCapacity() then (
			return false;  -- Retorna FALSE si la cantidad de agua excede la capacidad
		)
		else (
			represas := represas ^ [r];
			return true
		)
	  )
	pre forall existing in set elems represas & existing <> r
	post r in set elems represas;

	-- Agregar una nueva comunidad al sistema
	public AddComunidad: Comunidad ==> bool
	AddComunidad(c) ==
	  (comunidades := comunidades ^ [c];
	   return true)
	pre forall existing in set elems comunidades & existing <> c
	post c in set elems comunidades;


    -- Distribuir el agua entre las comunidades
    public DistributeWater: () ==> bool
DistributeWater() ==
  (
    if len represas = 0 or len comunidades = 0 then
      return false; -- No se puede distribuir agua sin represas o comunidades

    SortCommunitiesByPriority();
    UpdateWaterDistribution(represas, comunidades);

    return forall c in set elems comunidades &
      c.GetReceivedAmount() >= c.GetWaterNeed()
  );

    -- Actualizar la distribución de agua entre las comunidades
    private UpdateWaterDistribution: seq of Represa * seq of Comunidad ==> ()
    UpdateWaterDistribution(reps, coms) ==
      if len reps > 0 and len coms > 0
      then (
        dcl r : Represa := hd reps;
        dcl remainingReps : seq of Represa := tl reps;
        UpdateCommunityWater(r, coms);
        UpdateWaterDistribution(remainingReps, coms)
      )
      else skip;

    -- Actualizar el agua disponible para cada comunidad desde una represa
    private UpdateCommunityWater: Represa * seq of Comunidad ==> ()
    UpdateCommunityWater(r, coms) ==
      if len coms > 0
      then (
        dcl c : Comunidad := hd coms;
        dcl remainingComs : seq of Comunidad := tl coms;
        if r.IsWaterAvailable() and c.GetWaterNeed() > c.GetReceivedAmount()
        then (
          dcl requiredAmount : real := c.GetWaterNeed() - c.GetReceivedAmount();
          dcl availableAmount : real := r.GetWaterLevel();
dcl transferAmount : real := if requiredAmount < availableAmount 
                             then requiredAmount 
                             else availableAmount;
          if transferAmount > 0
          then (
            c.ReceiveWater(transferAmount);
            r.ExtractWater(transferAmount)
          )
        );
        UpdateCommunityWater(r, remainingComs)
      )
      else skip;


-- Comparar dos comunidades para la ordenación
private CompareCommunities: Comunidad * Comunidad ==> bool
CompareCommunities(x, y) ==
  return (x.GetWaterNeed() / x.GetPopulation()) > (y.GetWaterNeed() / y.GetPopulation());

-- Ordenar las comunidades según la prioridad en la distribución de agua
private SortCommunitiesByPriority: () ==> ()
SortCommunitiesByPriority() ==
  (
    dcl n : nat1 := len comunidades;

    for i = 1 to n - 1 do
      for j = 1 to n - i do
        if not ((comunidades(j).GetWaterNeed() / comunidades(j).GetPopulation()) > 
                (comunidades(j + 1).GetWaterNeed() / comunidades(j + 1).GetPopulation())) then
          comunidades := comunidades(1, j - 1) ^ [comunidades(j + 1), comunidades(j)] ^ comunidades(j + 2, n)
  );

end WaterDistributionSystem



-- Represa class
class Represa
  instance variables
    private id : nat1;
    private nivelAgua : real := 0;
    private calidadAgua : WaterDistributionSystem`WaterQuality;
    private capacidad : real;
 
  operations
    public Represa: nat1 * real * WaterDistributionSystem`WaterQuality * real ==> Represa
    Represa(i, nivel, calidad, cap) ==
      (id := i;
       nivelAgua := nivel;
       calidadAgua := calidad;
       capacidad := cap);

    public UpdateWaterLevel: real ==> ()
    UpdateWaterLevel(level) ==
      nivelAgua := level
    pre level >= 0 and level <= capacidad
    post nivelAgua = level;

    public ExtractWater: real ==> real
    ExtractWater(amount) ==
      (nivelAgua := nivelAgua - amount;
       return amount)
    pre amount <= nivelAgua
    post nivelAgua <=capacidad;

    public IsWaterAvailable: () ==> bool
    IsWaterAvailable() ==
      return nivelAgua > 0;

    public GetWaterLevel: () ==> real
    GetWaterLevel() ==
      return nivelAgua;

    -- Método para obtener la capacidad de la represa
    public GetCapacity: () ==> real
    GetCapacity() ==
      return capacidad;

end Represa


-- Comunidad class
class Comunidad
  instance variables
    private id : nat1;
    private poblacion : nat1;
    private necesidadAgua : real := 0;
    private cantidadRecibida : real := 0;
 
  operations
    public Comunidad: nat1 * nat1 ==> Comunidad
    Comunidad(i, pob) ==
      (id := i;
       poblacion := pob);

    public CalculateNeed: real ==> ()
    CalculateNeed(minPerPerson) ==
      necesidadAgua := poblacion * minPerPerson
    pre minPerPerson > 0
    post necesidadAgua = poblacion * minPerPerson;

    public ReceiveWater: real ==> ()
    ReceiveWater(amount) ==
      cantidadRecibida := cantidadRecibida + amount
    pre amount > 0
    post cantidadRecibida <=necesidadAgua;

    public GetWaterNeed: () ==> real
    GetWaterNeed() ==
      return necesidadAgua;

    public GetReceivedAmount: () ==> real
    GetReceivedAmount() ==
      return cantidadRecibida;

    public GetPopulation: () ==> nat1
    GetPopulation() ==
      return poblacion;
end Comunidad

